@import './reset.css';

/* individual open props imports - i.e. FONTS & GLOBAL VARIABLES */
/* TODO: do I need all of these? */
@import "https://unpkg.com/open-props/media.min.css";
@import "https://unpkg.com/open-props/fonts.min.css";
@import "https://unpkg.com/open-props/sizes.min.css";
@import "https://unpkg.com/open-props/easings.min.css";
@import "https://unpkg.com/open-props/zindex.min.css";
@import "https://unpkg.com/open-props/shadows.min.css";
@import "https://unpkg.com/open-props/aspects.min.css";
@import "https://unpkg.com/open-props/animations.min.css";
@import "https://unpkg.com/open-props/borders.min.css";


/* NOTES:

CUBE methodology - https://cube.fyi/

Import (or write) styles in this order:
- reset
- fonts
- global variables
- global styles (i.e. the elements)
- blocks (e.g. components like cards, buttons)
- compositions (layout - including #app layout)
- utilities

*/

/* ----------------- FONTS ------------------ */

/* ----------------- GLOBAL VARIABLES ---------------------- */

/* ----------------- GLOBAL STYLES - elements ---------------------- */

body {
  /* font-family: var(--font-rounded-sans); */
  font-family: var(--font-system-ui);
  background-color: var(--surface-0);
  color: var(--text-1);
}

main {
  /* margin: 0 auto; */
  padding: var(--size-4);
}

h1 {
  font-size: var(--font-size-8);
  color: var(--primary);
}

h2 {
  font-size: var(--font-size-6);
  color: var(--secondary);
}

h3 {
  font-size: var(--font-size-5);
  color: var(--tertiary);
}

h4 { font-size: var(--font-size-4) }
h5 { font-size: var(--font-size-3) }

/* ----------------- BLOCKS - components ---------------------- */


/* ----------------- COMPOSITIONS ---------------------- */

/* The composition layer's job is to create flexible, component-agnostic LAYOUT systems that support as many variants of content as possible. */

/* APP LAYOUT (#app in MTA-Land app) */
body {
  display: grid;
  grid-template-rows: auto 1fr auto;
  min-height: 100dvh;
}

/*
FLOW COMPOSITION
Like the Every Layout stack: https://every-layout.dev/layouts/stack/
Info about this implementation: https://piccalil.li/quick-tip/flow-utility/
*/
.flow > * + * {
  margin-top: var(--flow-space, 1em);
}

/*
WRAPPER COMPOSITION
A common wrapper/container
*/
.wrapper {
  margin-inline: auto;
  max-width: clamp(16rem, var(--wrapper-max-width, 100vw), 80rem);
  padding-left: var(--gutter);
  padding-right: var(--gutter);
  position: relative;
}

/* Wrapper for centered content COPIED from wnb-voices */
/* .wrapper {
  max-width: var(--wrapper-max-width, 50rem);
  margin-left: auto;
  margin-right: auto;
  padding-left: var(--wrapper-padding, 0px);
  padding-right: var(--wrapper-padding, 0px);
} */



/* ----------------- UTILITIES ---------------------- */

/* Reusable helpers - a utility class that does one job and does that one job well */

/*
VISUALLY HIDDEN UTILITY
Info: https://piccalil.li/quick-tip/visually-hidden/
*/
.visually-hidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 0;
  margin: 0;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
  white-space: nowrap;
}
